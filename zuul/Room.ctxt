#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ Assignment\ 4\r\n\ Used\ the\ provided\ sample\ solution\ to\ assignment\ 3.\r\n\ \r\n\ Class\ Room\ -\ a\ room\ in\ an\ adventure\ game.\r\n\r\n\ This\ class\ is\ part\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \r\n\r\n\ A\ "Room"\ represents\ one\ location\ in\ the\ scenery\ of\ the\ game.\ \ It\ is\ \r\n\ connected\ to\ other\ rooms\ via\ exits.\ \ For\ each\ existing\ exit,\ the\ room\ \r\n\ stores\ a\ reference\ to\ the\ neighboring\ room.\r\n\ Each\ room\ has\ a\ list\ of\ items\ in\ it.\r\n\ \r\n\ @author\ \ Michael\ Kolling\ and\ David\ J.\ Barnes\r\n\ @version\ 2006.03.30\r\n\ \r\n\ @author\ Lynn\ Marshall\ \r\n\ @version\ A3\ Solution\r\n\ \r\n\ @author\ Sami\ Mnif\ (101199669)\r\n\ @version\ 2022.03.19\r\n
comment1.params=description
comment1.target=Room(java.lang.String)
comment1.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ Adds\ the\ room\ to\ the\ static\ ArrayList\ rooms\ field\ for\ later\ use.\r\n\ \r\n\ @param\ description\ The\ room's\ description.\r\n
comment10.params=itemName
comment10.target=boolean\ itemInRoom(java.lang.String)
comment10.text=\r\n\ itemInRoom\ is\ a\ method\ that\ checks\ if\ the\ item\ is\ in\ the\ room.\r\n\ returns\ true\ if\ the\ item\ was\ found\ in\ the\ list,\ false\ otherwise\r\n\ \r\n\ @param\ String\ itemName\ the\ name\ of\ the\ item.\r\n\ @return\ boolean\ true\ if\ the\ item\ is\ in\ the\ room,\ false\ otherwise.\r\n
comment11.params=
comment11.target=java.util.ArrayList\ getRooms()
comment11.text=\r\n\ getRooms\ is\ a\ static\ method\ that\ returns\ the\ list\ of\ rooms\ added\ to\ the\r\n\ static\ ArryList\ rooms.\r\n\ \r\n\ @return\ ArrayList\ rooms\ that\ contains\ all\ rooms\ added\ in\ the\ game.\r\n
comment2.params=item
comment2.target=void\ addItem(Item)
comment2.text=\r\n\ Add\ an\ item\ to\ the\ room,\ best\ to\ check\ that\ it's\ not\ null.\r\n\ \r\n\ @param\ item\ The\ item\ to\ add\ to\ the\ room\r\n
comment3.params=direction\ neighbour
comment3.target=void\ setExit(java.lang.String,\ Room)
comment3.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n\ \r\n\ @param\ direction\ The\ direction\ of\ the\ exit\r\n\ @param\ neighbour\ The\ room\ to\ which\ the\ exit\ leads\r\n
comment4.params=
comment4.target=java.lang.String\ getShortDescription()
comment4.text=\r\n\ Returns\ a\ short\ description\ of\ the\ room,\ i.e.\ the\ one\ that\r\n\ was\ defined\ in\ the\ constructor\r\n\ \r\n\ @return\ The\ short\ description\ of\ the\ room\r\n
comment5.params=
comment5.target=java.lang.String\ getLongDescription()
comment5.text=\r\n\ Return\ a\ long\ description\ of\ the\ room\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n\ \ \ \ \ Items\:\ \r\n\ \ \ \ \ \ \ \ a\ chair\ weighing\ 5\ kgs.\r\n\ \ \ \ \ \ \ \ a\ table\ weighing\ 10\ kgs.\r\n\ \ \ \ \ \r\n\ @return\ A\ long\ description\ of\ this\ room\r\n
comment6.params=
comment6.target=java.lang.String\ getExitString()
comment6.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\r\n\ "Exits\:\ north\ west".\r\n\ \r\n\ @return\ Details\ of\ the\ room's\ exits\r\n
comment7.params=direction
comment7.target=Room\ getExit(java.lang.String)
comment7.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\ \r\n\ @param\ direction\ The\ exit's\ direction\r\n\ @return\ The\ room\ in\ the\ given\ direction\r\n
comment8.params=
comment8.target=java.lang.String\ getItems()
comment8.text=\r\n\ Return\ a\ String\ representing\ the\ items\ in\ the\ room,\ one\ per\ line.\r\n\ \r\n\ @return\ A\ String\ of\ the\ items,\ one\ per\ line\r\n
comment9.params=itemName
comment9.target=Item\ removeItem(java.lang.String)
comment9.text=\r\n\ removeItem\ is\ a\ method\ that\ removes\ the\ specified\ item\ from\ ArrayList\ \r\n\ items\ and\ returns\ that\ removed\ item.\r\n\ \r\n\ @param\ itemName\ String\ containing\ the\ name\ of\ the\ item\r\n\ @return\ Item\ the\ removed\ item\ from\ the\ ArrayList\r\n
numComments=12
